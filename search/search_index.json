{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chtholly Boss's Home","text":"<p>Hi there \ud83d\udc4b</p> <p>I'm Chtholly Boss, or in Chinese, \u201c\u73c2\u6735\u8389\u8001\u5927\".</p> <p>The name origins from my favorite anime character Chtholly Nota Seniorious, I suffix a \"Boss\" to make it sound more interesting :)</p> <p>I like things that can amuse myself, including Design Ideas, Funny Memes, etc. Just For Fun, right?</p> <ul> <li>\ud83d\udd2d I\u2019m currently studying in HITSZ, i.e. Harbin Institute of Technology in Shenzhen</li> <li>\ud83c\udf31 I\u2019m currently learning Computer Science and Technology</li> <li>\ud83d\udceb How to reach me: email me at 220110915@stu.hit.edu.cn</li> </ul> <p>My GitHub Stats:</p> <p></p>"},{"location":"blog/","title":"Blog Board","text":"<p>I will collect my notes on life here, including but not limited to:</p> <ul> <li>Reading Notes</li> <li>Personal Thoughts</li> <li>Practice Notes</li> <li>Game Notes</li> </ul> <p>In conclusion, I will write down all the things that I think are worth recording.</p> <p>Recommend Reading: ...</p>"},{"location":"blog/tags/","title":"TAG Board","text":"<p>You can find all the posts with a specific tag here.</p>"},{"location":"blog/tags/#tag:python","title":"Python","text":"<ul> <li>            Python One Liner          </li> <li>            Pytorch Extension          </li> </ul>"},{"location":"blog/tags/#tag:writing","title":"Writing","text":"<ul> <li>            Writing Tools          </li> </ul>"},{"location":"blog/tags/#tag:ebpf","title":"eBPF","text":"<ul> <li>            BPF Bootstrap          </li> <li>            BPF Minimal          </li> </ul>"},{"location":"blog/2025/03/30/bpf-bootstrap/","title":"BPF Bootstrap","text":"<p>In this post, we use <code>bootstrap</code> from libbpf-bootstrap examples as an example to introduce some data structures and functions in eBPF.</p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-bootstrap/#overview","title":"Overview","text":"<p>We plan to achieve the following goals:</p> <ul> <li>compile and run <code>bootstrap.bpf.c</code> and <code>bootstrap.c</code> in an independent folder</li> <li>master the basic usage of BPF Map, including <code>HASH</code>, <code>RINGBUF</code></li> <li>understand the usage of some BPF functions</li> </ul>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-bootstrap/#compile-and-run","title":"Compile and Run","text":"","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-bootstrap/#prerequisites","title":"Prerequisites","text":"<p>I list my environment here, other environments may also work, but I cannot guarantee it.</p> OS Kernel clang bpftool libbpf ArchLinux 6.13.7 21.0 7.6.0 1.6","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-bootstrap/#migration","title":"Migration","text":"<p>We first create a new folder and copy the relevant files:</p> <pre><code>mkdir foo &amp;&amp; cd foo\n</code></pre> <p>Then, copy the <code>bootstrap.bpf.c</code>, <code>bootstrap.h</code>, <code>bootstrap.c</code> from libbpf-bootstrap examples to the directory.</p> <p>We are missing <code>vmlinux.h</code> in <code>bootstrap.bpf.c</code>, which is a file that contains the BTF information of the kernel. We can generate it using the following command:</p> <pre><code>bpftool btf dump file /sys/kernel/btf/vmlinux format c &gt; vmlinux.h\n</code></pre> <p>Now we can generate the <code>bootstrap.skel.h</code> file.  <pre><code>clang -g -O2 -target bpf -D__TARGET_ARCH_x86_64  -c bootstrap.bpf.c -o bootstrap.bpf.o\nbpftool gen skeleton bootstrap.bpf.o &gt; bootstrap.skel.h\n</code></pre></p> <p>Then we are able to compile <code>bootstrap.c</code> and link necessary libraries to form the executable file like:</p> <pre><code>clang -Wall -I. -c bootstrap.c -o bootstrap.o\nclang -Wall bootstrap.o -L/usr/lib64 -lbpf -lelf -o bootstrap\n</code></pre> <p>If all goes well, we will get the executable file <code>bootstrap</code> in the current folder. Then, you can run <code>sudo ./bootstrap -d 10</code> to start the program and observe the output. </p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-bootstrap/#code-analysis","title":"Code Analysis","text":"<p>Now we start to analyze the code. We begin with <code>bootstrap.bpf.c</code> as usual.</p> <p>Overall, the program registers two <code>BPF</code> programs at <code>sched_process_exec</code> and <code>sched_process_exit</code> to monitor process creation and exit. The program has two core data structures:</p> <ul> <li><code>struct exec_start SEC(\".maps)</code> for recording the process creation time</li> <li><code>struct rb SEC(\".maps\")</code> for recording process creation/exit events and interacting with user-space programs</li> </ul> <p>We will analyze the usage of these two data structures in the program.</p> <p><code>struct exec_start</code> is defined as follows:</p> <pre><code>struct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 8192);\n    __type(key, pid_t);\n    __type(value, u64);\n} exec_start SEC(\".maps\");\n</code></pre> <p>In <code>handle_exec</code> function, the BPF program updates the map using <code>bpf_map_update_elem</code> function.</p> <pre><code>pid = bpf_get_current_pid_tgid() &gt;&gt; 32;\nts = bpf_ktime_get_ns();\nbpf_map_update_elem(&amp;exec_start, &amp;pid, &amp;ts, BPF_ANY);\n</code></pre> <p>And in <code>handle_exit</code> function, the BPF program looks up the key-value pair using <code>bpf_map_lookup_elem</code> function. After processing, it deletes the key-value pair using <code>bpf_map_delete_elem</code> function.</p> <pre><code>start_ts = bpf_map_lookup_elem(&amp;exec_start, &amp;pid);\nif (start_ts)\n    duration_ns = bpf_ktime_get_ns() - *start_ts;\nelse if (min_duration_ns)\n    return 0;\nbpf_map_delete_elem(&amp;exec_start, &amp;pid);\n</code></pre> <p>So we can summarize the basic usage of <code>BPF_MAP_TYPE_HASH</code> type <code>BPF Map</code> as follows:</p> <ul> <li>Create a <code>BPF Map</code> using <code>BPF_MAP_TYPE_HASH</code> type, specifying the key and value types and maximum number of entries.</li> <li>Use <code>bpf_map_update_elem</code> to update the key-value pair in the map.</li> <li>Use <code>bpf_map_lookup_elem</code> to look up the key-value pair in the map.</li> <li>Use <code>bpf_map_delete_elem</code> to delete the key-value pair from the map.</li> </ul> <p>You can find details about <code>BPF_MAP_TYPE_HASH</code> in bpf_map_type.</p> <p><code>struct rb</code> is defined as follows:</p> <pre><code>struct {\n    __uint(type, BPF_MAP_TYPE_RINGBUF);\n    __uint(max_entries, 256 * 1024);\n} rb SEC(\".maps\");\n</code></pre> <p>I recommend reading bpf ring buffer post to understand the <code>BPF Ring Buffer</code>. Here we just briefly introduce the usage of it using <code>handle_exit</code> as an example.</p> <pre><code>SEC(\"tp/sched/sched_process_exit\")\nint handle_exit(struct trace_event_raw_sched_process_template *ctx)\n{\n    struct task_struct *task;\n    struct event *e;\n    pid_t pid, tid;\n    u64 id, ts, *start_ts, duration_ns = 0;\n\n    ...\n\n    /* reserve sample from BPF ringbuf */\n    e = bpf_ringbuf_reserve(&amp;rb, sizeof(*e), 0);\n    if (!e)\n        return 0;\n\n    /* fill out the sample with data */\n    task = (struct task_struct *)bpf_get_current_task();\n\n    e-&gt;exit_event = true;\n    e-&gt;duration_ns = duration_ns;\n    e-&gt;pid = pid;\n    e-&gt;ppid = BPF_CORE_READ(task, real_parent, tgid);\n    e-&gt;exit_code = (BPF_CORE_READ(task, exit_code) &gt;&gt; 8) &amp; 0xff;\n    bpf_get_current_comm(&amp;e-&gt;comm, sizeof(e-&gt;comm));\n\n    /* send data to user-space for post-processing */\n    bpf_ringbuf_submit(e, 0);\n    return 0;\n}\n</code></pre> <p>From the code, we can see that to use <code>BPF Ring Buffer</code>, we should:</p> <ul> <li>reserve a buffer using <code>bpf_ringbuf_reserve</code> function</li> <li>fill the buffer with data</li> <li>submit the buffer using <code>bpf_ringbuf_submit</code> function</li> </ul> <p>The data structure used in the buffer is defined in <code>bootstrap.h</code> as follows:</p> <pre><code>#define TASK_COMM_LEN    16\n#define MAX_FILENAME_LEN 127\n\nstruct event {\n    int pid;\n    int ppid;\n    unsigned exit_code;\n    unsigned long long duration_ns;\n    char comm[TASK_COMM_LEN];\n    char filename[MAX_FILENAME_LEN];\n    bool exit_event;\n};\n</code></pre> <p>Now we turn to <code>bootstrap.c</code>. Compared to minimal, we need to create a <code>BPF Ring Buffer</code> and register an event handler after <code>bootstrap_bpf__attach</code>.</p> <pre><code>rb = ring_buffer__new(bpf_map__fd(skel-&gt;maps.rb), handle_event, NULL, NULL);\nif (!rb) {\n    err = -1;\n    fprintf(stderr, \"Failed to create ring buffer\\n\");\n    goto cleanup;\n}\n</code></pre> <p>The handler function is defined as follows:</p> <pre><code>static int handle_event(void *ctx, void *data, size_t data_sz)\n{\n    ...\n    // output event information\n    if (e-&gt;exit_event) {\n        printf(\"%-8s %-5s %-16s %-7d %-7d [%u]\", ts, \"EXIT\", e-&gt;comm, e-&gt;pid, e-&gt;ppid,\n               e-&gt;exit_code);\n        if (e-&gt;duration_ns)\n            printf(\" (%llums)\", e-&gt;duration_ns / 1000000);\n        printf(\"\\n\");\n    } else {\n        printf(\"%-8s %-5s %-16s %-7d %-7d %s\\n\", ts, \"EXEC\", e-&gt;comm, e-&gt;pid, e-&gt;ppid,\n               e-&gt;filename);\n    }\n\n    return 0;\n}\n</code></pre>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-bootstrap/#appendix","title":"Appendix","text":"<p>We can find tracing events in the <code>/sys/kernel/debug/tracing/events</code> directory. For example, we can find the <code>sched</code> events in <code>/sys/kernel/debug/tracing/events/sched</code> like: </p> <ul> <li><code>sched_stat_runtime</code>: runtime of a task</li> <li><code>sched_switch</code>: context switch between tasks</li> <li><code>sched_migrate_task</code>: migration of a task between CPUs</li> <li><code>sched_move_numa</code>: NUMA migration of a task</li> <li><code>sched_wakeup</code>: wakeup of a task</li> </ul> <p>Try to mount your customed handler to these events. Feel free to explore the usage of <code>BPF</code> in the kernel :)</p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/","title":"BPF Minimal","text":"<p>In this post, we use <code>minimal</code> from libbpf-bootstrap examples as an example to introduce the basic process of eBPF development.</p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#overview","title":"Overview","text":"<p>We plan to achieve the following goals:</p> <ul> <li>Compile and run <code>minimal.bpf.c</code> and <code>minimal.c</code> in an independent folder</li> <li>Provide a command line argument <code>-p</code> for the <code>minimal</code> program to specify the monitored program</li> <li>learn about <code>bpf_get_current_pid_tgid()</code> and <code>bpf_printk</code></li> </ul>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#compile-and-run","title":"Compile and Run","text":"","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#prerequisites","title":"Prerequisites","text":"<p>I list my environment here, other environments may also work, but I cannot guarantee it.</p> OS Kernel clang bpftool libbpf ArchLinux 6.13.7 21.0 7.6.0 1.6","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#migration","title":"Migration","text":"<p>We first create a new folder and copy the relevant files:</p> <pre><code>mkdir foo &amp;&amp; cd foo\ntouch minimal.bpf.c minimal.c\n</code></pre> <p>Then, copy the content of <code>minimal.bpf.c</code>, <code>minimal.c</code> from libbpf-bootstrap examples to the created files.</p> <p>By now, the statement <code>#include \"minimal.skel.h\"</code> in <code>minimal.c</code> is invalid because we have not generated the <code>minimal.skel.h</code> file yet. This file can be generated with the following command:</p> <pre><code>clang -g -O2 -target bpf -D__TARGET_ARCH_x86_64  -c minimal.bpf.c -o minimal.bpf.o\nbpftool gen skeleton minimal.bpf.o &gt; minimal.skel.h\n</code></pre> <p>Then, we are able to compile <code>minimal.c</code> and link necessary libraries to form the executable file like:</p> <pre><code>clang -Wall -I. -c minimal.c -o minimal.o\nclang -Wall minimal.o -L/usr/lib64 -lbpf -lelf -o minimal\n</code></pre> <p>If all goes well, we will get the executable file <code>minimal</code> in the current folder. Then, you can run <code>sudo ./minimal</code> to start the program. In another session, run <code>sudo cat /sys/kernel/debug/tracing/trace_pipe</code> to see the output of the program.</p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#code-analysis","title":"Code Analysis","text":"<p>Now we start to analyze the code. We begin with <code>minimal.bpf.c</code>, which is relatively short:</p> <pre><code>#include &lt;linux/bpf.h&gt;\n#include &lt;bpf/bpf_helpers.h&gt;\n\nchar LICENSE[] SEC(\"license\") = \"Dual BSD/GPL\";\n</code></pre> <p>Header files are included at the beginning, and the license is defined. The license is important because it determines how the BPF program can be used. Without a license, the kernel may reject to load the BPF program. </p> <pre><code>int my_pid = 0;\n</code></pre> <p>We define a global variable <code>my_pid</code> to store the PID of the monitored program. This variable will be stored in the <code>bss</code> section of the BPF program. We will see this later.</p> <pre><code>SEC(\"tp/syscalls/sys_enter_write\")\nint handle_tp(void *ctx)\n{\n    int pid = bpf_get_current_pid_tgid() &gt;&gt; 32;\n\n    if (pid != my_pid)\n        return 0;\n\n    bpf_printk(\"BPF triggered from PID %d.\\n\", pid);\n\n    return 0;\n}\n</code></pre> <p>Here we come to the main part of the BPF program. First, we define a <code>tracepoint</code> for the <code>sys_write</code> syscall using <code>SEC(\"tp/syscalls/sys_enter_write\")</code>. <code>SEC</code> means <code>section</code>, you can find details in libbpf-ebpf-macro-sec. The <code>handle_tp</code> function will be called when the <code>sys_write</code> syscall is triggered.</p> <p>When <code>handle_tp</code> is called, we first get the PID of the current process using <code>bpf_get_current_pid_tgid()</code>. This function returns a 64-bit value, where the upper 32 bits represent the PID and the lower 32 bits represent the TID. We shift right by 32 bits to get the PID.</p> <p>Common <code>bpf_get_current_pid_tgid()</code> usage is like:</p> <pre><code>u64 pid_tgid = bpf_get_current_pid_tgid();\nu32 pid = pid_tgid &gt;&gt; 32;\nu32 tid = (u32)pid_tgid;\n</code></pre> <p>We use <code>pid</code> to filter the process we want to monitor, then use <code>bpf_printk</code> to print some debug information to <code>/sys/kernel/debug/tracing/trace_pipe</code>, which is a special file that allows us to see the output of the BPF program in real-time.</p> <p>Then we check if the PID matches <code>my_pid</code>. If it does, we use <code>bpf_printk</code> to print a message to <code>/sys/kernel/debug/tracing/trace_pipe</code>. This is a special file that allows us to see the output of the BPF program in real-time.</p> <p>Finally, we return 0 to indicate that the function executed successfully.</p> <p>So far so good, we compile the progrom and use <code>bpftool</code> to generate the skeleton file <code>minimal.skel.h</code> for it.</p> <pre><code>clang -g -O2 -target bpf -D__TARGET_ARCH_x86_64  -c minimal.bpf.c -o minimal.bpf.o\nbpftool gen skeleton minimal.bpf.o &gt; minimal.skel.h\n</code></pre> <p>We check the main struct in <code>minimal.skel.h</code>. </p> <pre><code>struct minimal_bpf {\n    struct bpf_object_skeleton *skeleton;\n    struct bpf_object *obj;\n    struct {\n        struct bpf_map *bss;\n        struct bpf_map *rodata;\n    } maps;\n    struct {\n        struct bpf_program *handle_tp;\n    } progs;\n    struct {\n        struct bpf_link *handle_tp;\n    } links;\n    struct minimal_bpf__bss {\n        int my_pid;\n    } *bss;\n    ...\n};\n</code></pre> <p>You can see that the <code>minimal_bpf</code> struct contains a pointer to the BPF program, which will be used the open, load, and attach the BPF program in user space. As we define a global variable <code>my_pid</code> in the BPF program, we can see a <code>bss</code> map in the <code>maps</code> field, which contains <code>my_pid</code> in <code>minimal_bpf__bss</code> struct.</p> <p>We now switch to <code>minimal.c</code>, which is the user space program. I extract the relevant code for loading and attaching the BPF program in a <code>bootstrap</code> function:</p> <pre><code>void bootstrap(__pid_t pid)\n{\n    struct minimal_bpf *skel;\n    /* Open BPF application */\n    skel = minimal_bpf__open();\n    if (!skel) {\n        fprintf(stderr, \"Failed to open BPF skeleton\\n\");\n        exit(1);\n    }\n    /* ensure BPF program only handles write() syscalls from our process */\n    skel-&gt;bss-&gt;my_pid = pid;\n    int err = minimal_bpf__load(skel);\n    if (err) {\n        fprintf(stderr, \"Failed to load and verify BPF skeleton\\n\");\n        goto cleanup;\n    }\n    err = minimal_bpf__attach(skel);\n    if (err) {\n        fprintf(stderr, \"Failed to attach BPF skeleton\\n\");\n        goto cleanup;\n    }\n    return;\ncleanup:\n    minimal_bpf__destroy(skel);\n    exit(err);\n}\n</code></pre> <p>This procedure is relatively fixed, i.e., <code>open -&gt; init -&gt; load -&gt; attach</code>.</p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#customization","title":"Customization","text":"<p>Now let's add a command line argument <code>-p</code> to the <code>minimal</code> program to specify the PID of the monitored program. We can use <code>getopt</code> to parse command line arguments.</p> <pre><code>void argparse(int argc, char **argv)\n{\n    int opt;\n    while ((opt = getopt(argc, argv, \"p:\")) != -1) {\n        switch (opt) {\n        case 'p':\n            pid = atoi(optarg);\n            break;\n        default:\n            fprintf(stderr, \"Usage: %s [-p pid]\\n\", argv[0]);\n            exit(1);\n        }\n    }\n}\n</code></pre> <p>modify the <code>main</code> function like: <pre><code>int main(int argc, char **argv)\n{\n    /* Set up libbpf errors and debug info callback */\n    libbpf_set_print(libbpf_print_fn);\n\n    pid = getpid();\n\n    argparse(argc, argv);\n\n    bootstrap(pid);\n\n    printf(\"Successfully started! Please run `sudo cat /sys/kernel/debug/tracing/trace_pipe` \"\n           \"to see output of the BPF programs.\\n\");\n\n    for (;;) {\n        // Keep the process running\n    }\n    return 0;\n}\n</code></pre></p> <p>Compile the modified <code>minimal.c</code> and <code>minimal.bpf.c</code> files again. Now we can write a separate program to test the monitoring functionality. </p> <p>For example, we write a simple program <code>test.c</code> to write to a file:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    while (1){\n        fprintf(stdout, \".\");\n        sleep(1);\n    }\n}\n</code></pre> <p>Compile the program use <code>clang -o test test.c</code> and run it in a separate terminal. Use <code>ps aux | grep test</code> to get the PID of it. Then run the <code>minimal</code> program with the PID in another session:</p> <pre><code>sudo ./minimal -p &lt;pid&gt;\n</code></pre> <p>Then you can see the output of the <code>minimal</code> program in the terminal where you run <code>cat /sys/kernel/debug/tracing/trace_pipe</code>.</p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#appendix","title":"Appendix","text":"<p>We recommend the following resources for further learning:</p>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#reference","title":"Reference","text":"<ul> <li>Linux BPF subsystem</li> <li>eBPF Library</li> <li>BPF and XDP Reference Guide</li> </ul>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#repository","title":"Repository","text":"<ul> <li>awesome-ebpf</li> <li>bpf-developer-tutorial</li> <li>libbpf-bootstrap</li> </ul>","tags":["eBPF"]},{"location":"blog/2025/03/30/bpf-minimal/#post","title":"Post","text":"<ul> <li>Official Introduction to eBPF</li> <li>Building BPF applications with libbpf-bootstrap</li> </ul>","tags":["eBPF"]},{"location":"blog/2024/11/10/mkdocs/","title":"MkDocs","text":"<p>Notes on learning MkDocs.</p> <p>To install MkDocs, you can use pip: <pre><code>pip install mkdocs\n</code></pre></p>"},{"location":"blog/2024/11/10/mkdocs/#hello-mkdocs","title":"Hello, MkDocs","text":"<p>When I first access a tool, I usually want to know how to use it to do sth simple but enough to construct a naive conceptual model.  For MkDocs, I follow mkdocs-material a great tutorial to get started.</p>"},{"location":"blog/2024/11/10/mkdocs/#init","title":"Init","text":"<p>To create a new MkDocs project, you can use the following command: <pre><code>mkdocs new [directory]\n</code></pre></p> <p>This will create a new directory with the specified name and a <code>mkdocs.yml</code> configuration file.  Most configurations will go in the <code>mkdocs.yml</code> file. For now, we just keep it simple and add a site_name: <pre><code>site_name: My Docs\n</code></pre></p> <p>Now, we must get something to see what will happen when we modify anything. This can be done by: <pre><code>mkdocs serve\n</code></pre></p> <p>This will start a local web server and open the default web browser to the MkDocs site.  Go to <code>http://127.0.0.1:8000/</code> to see the site.</p> <p>Before building the site, we may want to know how to write blogs and how to organize them.</p>"},{"location":"blog/2024/11/10/mkdocs/#writing","title":"Writing","text":"<p>I refer to Blog Tutorial of mkdocs-material to learn how to write blogs.</p> <p>First, modify the <code>mkdocs.yml</code> file like the following: <pre><code>site_name: ...\ntheme:\n  name: material\nplugins:\n  - search\n  - blog\n</code></pre> Then you will see a new <code>docs/blog</code> directory in your project. Blogs and relevant files are stored in this directory. Each post must have a page header with at least date fields. For example:</p> <pre><code>---\ndate: \n  created: 2024-11-10\n---\n\n# Hello, MkDocs\nThis is the excerpt that will show up in the blog list.\n&lt;!-- more --&gt;\nFollows will not be shown in the excerpt.\n</code></pre> <p>You can set many metadata for each post inside the header:</p> <ul> <li>draft: if set to true, <code>build</code> will ignore it</li> <li>readtime: the estimated reading time of the post</li> <li>pin: if set to true, the post will be pinned to the top of the index page</li> <li>links: a list of links to other pages or resources related to the post</li> </ul>"},{"location":"blog/2024/11/10/mkdocs/#deploying","title":"Deploying","text":"<p>Refer to Deploying to GitHub Pages to learn how to deploy your site using Github Pages.</p>"},{"location":"blog/2024/11/10/mkdocs/#misc-topics","title":"Misc Topics","text":""},{"location":"blog/2024/11/10/mkdocs/#navigation","title":"Navigation","text":"<p>When we write a lot of blogs, we may want to organize them in a tree structure. To do this, we can use the <code>nav</code> field in the <code>mkdocs.yml</code> file. For example: <pre><code>nav:\n  - Home: index.md\n  - Blog:\n    - blog/index.md\n    ...\n</code></pre> Navigation can be extremely useful when combined with the Categories and Tags feature of MkDocs. See Navigation tutorial of mkdocs-material for more details.</p> <p>To put it easy, what you need is just to add a <code>categories:</code> field in the header of the post. Also, in the <code>mkdocs.yml</code> file, you can write: <pre><code>plugin:\n  ...\n  blog:\n    ...\n    categories_name: Categories\n    categories_allowed:\n        - Tools\n        ...\n</code></pre></p> <p>And besides categories, you may also want to use tags to classify your posts. First, add a tags plugin in <code>mkdocs.yml</code>: <pre><code>plugins:\n  - blog:\n    ...\n  - tags\n</code></pre> Then add a <code>tags:</code> field in the header of the post: <pre><code>---\ndate: ...\ntags:\n  - Python\n---\n</code></pre> Finally, add a tag index file: - create a <code>docs/blog/tags.md</code> file - modify <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - tags:\n    tags_file: blog/tags.md\nnav:\n  - Blog:\n    - blog/index.md\n    - Tags: blog/tags.md\n</code></pre>"},{"location":"blog/2024/11/10/mkdocs/#math","title":"Math","text":"<p>From time to time, I will need to write math equations in my blog. Markdown itself support LaTeX locally, but MkDocs does not support it by default. So, I refer to mkdocs-material Math Reference to learn how to accomplish this.</p> <p>To put it easy, first, inside <code>docs/</code>, create a <code>javascripts/</code> directory and put a <code>mathjax.js</code> file inside it. Fill the file with the following content: <pre><code>window.MathJax = {\n  tex: {\n    inlineMath: [[\"\\\\(\", \"\\\\)\"]],\n    displayMath: [[\"\\\\[\", \"\\\\]\"]],\n    processEscapes: true,\n    processEnvironments: true\n  },\n  options: {\n    ignoreHtmlClass: \".*|\",\n    processHtmlClass: \"arithmatex\"\n  }\n};\n\ndocument$.subscribe(() =&gt; { \n  MathJax.startup.output.clearCache()\n  MathJax.typesetClear()\n  MathJax.texReset()\n  MathJax.typesetPromise()\n})\n</code></pre> Then, inside <code>mkdocs.yml</code>, add the following lines: <pre><code>...\nmarkdown_extensions:\n  - pymdownx.arithmatex:\n      generic: true\n\nextra_javascript:\n  - javascripts/mathjax.js\n  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js\n</code></pre></p>"},{"location":"blog/2024/11/10/mkdocs/#admonitions","title":"Admonitions","text":"<p>Admonitions are a way to highlight important information in your documentation. You can write an admonition like the following: <pre><code>!!! [type] \"Title\"\n    Content\n</code></pre></p> <p>I often use the following admonitions:</p> <p>Tip</p> <p>This is a tip.</p> <p>Note</p> <p>This is a note.</p> <p>Warning</p> <p>This is a warning.</p>"},{"location":"blog/2024/11/10/mkdocs/#pdf-embed","title":"PDF Embed","text":"<p>To embed a PDF file in a MkDocs page, use the <code>mkdocs-pdf</code> plugin. Follow the instructions here</p>"},{"location":"blog/2024/11/11/python-one-liner/","title":"Python One Liner","text":"<p>This post is a collection of Python one-liners, which will make your code neat without breaking the readability.</p>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#basic-syntax","title":"Basic Syntax","text":"<p>We will start with the basic syntax of Python.</p>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#chain-comparison","title":"Chain Comparison","text":"<p>In most programming languages, you can only compare two values at a time. However, Python allows you to compare multiple values at once, which is called \"chain comparison\".</p> <pre><code>x, y = 1, 2\nassert 0 &lt; x &lt; y &lt; 100\n</code></pre> <p>But you'd better include one directional comparison in the chain to avoid ambiguity.</p> <pre><code>assert 0 &lt; x &gt; y &lt; 100 # Don't do this!\n</code></pre>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#comprehension","title":"Comprehension","text":"<p>Comprehension is a powerful feature of Python that allows you to create lists, sets, and dictionaries in a concise and readable way.</p> <pre><code># List Comprehension\nsquares = [x**2 for x in range(10)]\n\n# Set Comprehension\nsquares_set = {x**2 for x in range(10)}\n\n# Dictionary Comprehension\nsquares_dict = {x: x**2 for x in range(10)}\n</code></pre>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#control-flow","title":"Control Flow","text":"<p>Python has a few control flow statements that are commonly used in one-liners.</p> <pre><code># If-Else\nx = 1 if 1 &lt; 2 else 2\n\n# For-Else\nfor i in range(10):\n    if i == 5:\n        break\nelse:\n    print(\"No break\")\n</code></pre>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#advanced","title":"Advanced","text":"<p>There are also other Best Practices in Python that can make your code more readable and efficient.</p>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#sequence-reverse","title":"Sequence Reverse","text":"<pre><code>s = \"hello\"\nassert s[::-1] == \"olleh\"\n</code></pre>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#getter","title":"Getter","text":"<p>use <code>get</code> method to provide a default value when the key is not found in a dictionary. This may be useful than a try-except block.</p> <pre><code>d = {\"a\": 1, \"b\": 2}\nassert d.get(\"c\", 3) == 3\n</code></pre> <p>In general, get values from Getters is more recommended.</p>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#partial","title":"Partial","text":"<p>Pattial function is a function that takes some arguments and returns a new function that takes the remaining arguments. This can be useful when you want to partially apply a function to some arguments and then call it later with the remaining arguments.</p> <pre><code>from functools import partial\n\ndef func(a, b, c):\n    ...\n\nkwargs = {\"a\": 1, \"c\": 3}\n\nfn = partial(func, **kwargs)\n</code></pre> <p>Assume that you are training a machine learning model, and you want to tune the hyperparameters.  However, there are many hyperparameters, and you don't want to write a lot of code to try different combinations. You can use partial function to partially apply some arguments to the function, and then call it later with the remaining arguments.</p>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#zip","title":"Zip","text":"<p>Zip is a built-in function in Python that takes two or more iterables and returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the input iterables.</p> <pre><code>names = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\n\nfor name, age in zip(names, ages):\n    print(f\"{name} is {age} years old\")\n</code></pre>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#enumerate","title":"Enumerate","text":"<p>Enumerate is a built-in function in Python that takes an iterable and returns an iterator of tuples, where the i-th tuple contains the i-th element from the iterable and its index.</p> <pre><code>names = [\"Alice\", \"Bob\", \"Charlie\"]\n\nfor i, name in enumerate(names):\n    print(f\"{i}: {name}\")\n</code></pre> <p>It is much better than mainly using <code>range(len(names))</code> and <code>names[i]</code>.</p>","tags":["Python"]},{"location":"blog/2024/11/11/python-one-liner/#remove-duplicates","title":"Remove Duplicates","text":"<p>You can use <code>set</code> to remove duplicates from a list.</p> <pre><code>names = [\"Alice\", \"Bob\", \"Charlie\", \"Alice\"]\nnames = list(set(names))\n</code></pre> <p>However, this will not preserve the order of the elements. If you want to preserve the order, you can use <code>dict.fromkeys()</code>.</p> <pre><code>names = [\"Alice\", \"Bob\", \"Charlie\", \"Alice\"]\nnames = list(dict.fromkeys(names))\n</code></pre> <p>You may worry about the performance of <code>dict.fromkeys()</code>. Indeed, if this part of the code is a bottleneck, you can rewrite the logic to avoid using <code>dict.fromkeys()</code>. For most cases, the performance difference is negligible.</p>","tags":["Python"]},{"location":"blog/2024/11/13/pytorch-extension/","title":"Pytorch Extension","text":"<p>Illustrate how to write cpp or cuda extension for pytorch.</p> <p>This post originates from my need to write a custom CUDA kernel for a neural network layer. Mainly based on: - Pytorch Extension</p> <p>However, the official tutorial is a bit complicated. I will try to prune it down to the essential parts.</p>","tags":["Python"]},{"location":"blog/2024/11/13/pytorch-extension/#binding","title":"Binding","text":"<p>First, create a cpp file <code>module.cpp</code> and include the header files: <pre><code>#include &lt;torch/extension.h&gt;\n#include &lt;pybind11/pybind11.h&gt; // https://pybind11.readthedocs.io/en/stable/index.html\n\nnamespace py = pybind11;\n</code></pre></p> <p>Then, design your module in<code>module.cpp</code>:</p> <pre><code>int foo() {\n    return 0;\n}\n\n// TORCH_EXTENSION_NAME is a macro defined by pytorch, which will be replaced by the name of your extension.\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.doc() = \"A tiny extension\"; // add docstring\n\n    py::module sub = m.def_submodule(\"sub\", \"This is a Submodule\"); // define a submodule\n    sub.def(\"foo\", &amp;foo, \"A function under the submodule\"); // register the implementation &amp;foo to sub.foo\n    // ...\n}\n</code></pre> <p>Write a <code>setup.py</code> file to compile the extension:</p> <pre><code>from setuptools import setup\nfrom torch.utils.cpp_extension import BuildExtension, CppExtension, CUDAExtension\n\nsetup(\n    name='module',\n    ext_modules=[\n        # If containing CUDA code, use CUDAExtension instead\n        CUDAExtension('module', [\n            'module.cpp',\n            ...\n        ])\n    ],\n    cmdclass={'build_ext': BuildExtension}\n)\n</code></pre>","tags":["Python"]},{"location":"blog/2024/11/13/pytorch-extension/#using","title":"Using","text":"<p>Finally, compile the extension using <code>pip install .</code>, then you can use it in your python script:</p> <pre><code>import torch\nimport module\n\nprint(module.sub.foo()) # 0\n</code></pre>","tags":["Python"]},{"location":"blog/2024/11/13/pytorch-extension/#troubleshooting","title":"Troubleshooting","text":"<p>This section is for some common problems I encountered when writing the extension.</p> <p>Usage</p> <p>To call your custom extension, you must <code>import torch</code> at the beginning of your script. Otherwise, the extension will not be loaded.</p> <p>Linking</p> <p>If you are under Windows, chances are that you will encounter a linking error. This is mainly because the link libraries are not included in the <code>setup.py</code>. You can add the following lines to <code>setup.py</code>: <pre><code>extra_link_args = ['-LIBPATH:path/to/your/libs', 'your.lib']\n</code></pre></p> <p>VScode Intellisense</p> <p>If you are using VScode, you may encounter a problem that the IntelliSense cannot find the header files. This is because the header files are not included in the <code>include_path</code>. You can add the following lines to a <code>.vscode/c_cpp_properties.json</code> file: <pre><code>{\n    \"configurations\": [\n        {\n            \"includePath\": [\n            \"${workspaceFolder}/**\",\n            \".../anaconda3/pkgs/python-3.9.20-h8205438_1/include/**\",\n            \".../anaconda3/Lib/site-packages/torch/include/**\"\n        ],\n        }\n    ],\n}\n</code></pre> You should replace <code>.../anaconda3</code> with the actual path of your anaconda installation. Or replace the path with the actual path of your <code>torch</code> installation.</p>","tags":["Python"]},{"location":"blog/2024/11/13/pytorch-extension/#more","title":"More","text":"<p>In this part, I will show more usage of pybind11 and setuptools. If thinis is too long, I will move some of them to another post.</p>","tags":["Python"]},{"location":"blog/2024/11/13/pytorch-extension/#pybind11","title":"Pybind11","text":"<p>...</p>","tags":["Python"]},{"location":"blog/2024/11/13/pytorch-extension/#setuptools","title":"Setuptools","text":"<p>...</p>","tags":["Python"]},{"location":"blog/2024/11/10/writing-tools/","title":"Writing Tools","text":"<p>Here are some tools that I use for writing.</p>","tags":["Writing"]},{"location":"blog/2024/11/10/writing-tools/#why-different-tools","title":"Why different tools?","text":"<p>When I mentioned writing, I am talking about: - Writing daily notes - Writing a post/document - Writing a paper - Writing a slide</p> <p>For different purposes, I need different tools. Just as the UNIX philosophy:</p> <p>Do One Thing and Do It Well</p> <p>During the experience of using one tool, you may find that it is suitable for one part of your work, but not for another part. So, you need to use different tools for different purposes.</p>","tags":["Writing"]},{"location":"blog/2024/11/10/writing-tools/#environment","title":"Environment","text":"<p>Most of the time, I use Visual Studio Code as my Writing IDE, mainly because its Extensibility. That is, you can install extensions to make it do whatever you want and enhance your experience.</p>","tags":["Writing"]},{"location":"blog/2024/11/10/writing-tools/#markdown","title":"Markdown","text":"<p>I use Markdown to write daily notes and posts. You can quickly setup a local Markdown environment by installing the following extensions: - Markdown All in One - Markdown Preview Enhanced</p> <p>You could quickly master Markdown by reading the official guide. For writing posts,  you can refer to my other posts like: - mkdocs</p>","tags":["Writing"]},{"location":"blog/2024/11/10/writing-tools/#latex","title":"Latex","text":"<p>I sometimes use Latex to write documents and papers.</p> <p>You can quickly setup a local Latex environment by Latex Workshop extension.</p> <p>For this extension to work, you need to: - Install a Latex distribution, I choose MikTex - If MikTex is installed, you need to install Perl to make it work with vscode.</p> <p>After the insallation, you can create a new <code>.tex</code> file and write some code.</p> <p><pre><code>\\documentclass{article}\n\\begin{document}\nHello, world!\n\\end{document}\n</code></pre> After you save the file, Latex Workshop will automatically compile it and generate a pdf file. If you want to use some packages, you can add them in the MikTeX package manager.</p>","tags":["Writing"]},{"location":"blog/2024/11/10/writing-tools/#typst","title":"Typst","text":"<p>I use Typst for writing my most homework assignments, and sometimes for writing some slides.</p> <p>You can quickly setup a local Typst environment by Tinymist Typst extension.</p> <p>After the insallation, you can create a new <code>.typ</code> file and write some code.</p> <pre><code>= Hello, world!\n</code></pre>","tags":["Writing"]},{"location":"blog/category/linux/","title":"Linux","text":""},{"location":"blog/category/programming/","title":"Programming","text":""},{"location":"blog/category/tools/","title":"Tools","text":""}]}